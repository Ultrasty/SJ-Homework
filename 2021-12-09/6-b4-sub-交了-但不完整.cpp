/* 1851521 沈天宇 软工 */

#include <cstdio>   //NULL
//不再允许包含任何系统头文件

/* ----- 不允许定义任何形式的全局变量/全部数组/只读全局变量/宏定义!!!!! ----- */

/* 函数实现部分，{ }内的东西可以任意调整，目前的return只是一个示例，可改变 */
/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strlen(const char* str)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int count=0;
    if (str == NULL) {
        return 0;
    }
    while (*str != 0) {
        str++;
        count++;
    }
    return count;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
char *tj_strcat(char *s1, const char *s2)
{
    char* oris1 = s1;
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (s2 == NULL) {
        return s1;
    }
    if (s1 == NULL) {
        return NULL;
    }
    while (*s1 != 0) {
        s1++;
    }
    while (*s2 != 0) {
        *s1 = *s2;
        s1++;
        s2++;
    }
    *s1 = *s2;
    return oris1;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
char *tj_strncat(char *s1, const char *s2, const int len)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */

    char* oris1 = s1;
    const char* oris2 = s2;
    if (s2 == NULL) {
        return s1;
    }
    if (s1 == NULL) {
        return NULL;
    }
    while (*s1 != 0) {
        s1++;
    }
    while (*s2 != 0 && s2 - oris2 < len) {
        *s1 = *s2;
        s1++;
        s2++;
    }
    *s1 = 0;
    return oris1;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
char *tj_strcpy(char *s1, const char *s2)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    char* oris1 = s1;
    const char* oris2 = s2;

    if (s1 == NULL) {
        return NULL;
    }

    if (s2 == NULL) {
        *s1 = 0;
        return oris1;
    }

    while (*s2 != 0) {
        *s1 = *s2;
        s1++;
        s2++;
    }
    *s1 = 0;

    return oris1;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
char *tj_strncpy(char *s1, const char *s2, const int len)
{
    char* oris1 = s1;
    const char* oris2 = s2;
    if (s1 == NULL) {
        return NULL;
    }

    if (s2 == NULL) {
        *s1 = 0;
        return oris1;
    }

    while (*s2 != 0 && s2 - oris2 < len) {
        *s1 = *s2;
        s1++;
        s2++;
    }

    return oris1;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strcmp(const char *s1, const char *s2)
{
    if (s1 == 0 && s2 == 0) {
        return 0;
    }

    if (s1 == NULL) {
        return -1;
    }

    if (s2 == NULL) {
        return 1;
    }

    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    while (*s1 != 0 && *s2 != 0) {
        if (*s1 != *s2) {
            return *s1 - *s2;
        }
        s1++;
        s2++;
    }

    if (*s1 == 0 && *s2 == 0) {
        return 0;
    }
    else
        return *s1 - *s2;

    return 0;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strcasecmp(const char *s1, const char *s2)
{
    char temp1, temp2;
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (s1 == 0 && s2 == 0) {
        return 0;
    }

    if (s1 == NULL) {
        return -1;
    }

    if (s2 == NULL) {
        return 1;
    }

    while (*s1 != 0 && *s2 != 0) {

        if (*s1 >= 'A' && *s1 <= 'Z') {
            temp1 = *s1 + 0x20;
        }
        else
            temp1 = *s1;

        if (*s2 >= 'A' && *s2 <= 'Z') {
            temp2 = *s2 + 0x20;
        }
        else
            temp2 = *s2;

        if (temp1 != temp2) {
            return temp1 - temp2;
        }
        s1++;
        s2++;
    }



    if (*s1 == 0 && *s2 == 0) {
        return 0;
    }
    else
        return *s1 - *s2;

    return 0;

    return 0;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strncmp(const char *s1, const char *s2, const int len)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */

    const char* oris1 = s1;
    if (s1 == 0 && s2 == 0) {
        return 0;
    }

    if (s1 == NULL) {
        return -1;
    }

    if (s2 == NULL) {
        return 1;
    }

    while (*s1 !=0 && *s2!=0 && s1 - oris1 < len) {

        if (*s1 != *s2) {
            return *s1 - *s2;
        }
        s1++;
        s2++;
    }

    if (s1 - oris1 != len) {
        return *s1 - *s2;
    }
    return 0;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strcasencmp(const char *s1, const char *s2, const int len)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    
    if (s1 == 0 && s2 == 0) {
        return 0;
    }

    if (s1 == NULL) {
        return -1;
    }

    if (s2 == NULL) {
        return 1;
    }

    char temp1 = *s1;
    char temp2 = *s2;
    const char* oris1 = s1;


    while (*s1 != 0 && *s2 != 0 && s1 - oris1 < len) {

        if (*s1 >= 'A' && *s1 <= 'Z') {
            temp1 = *s1 + 0x20;
        }
        else
            temp1 = *s1;

        if (*s2 >= 'A' && *s2 <= 'Z') {
            temp2 = *s2 + 0x20;
        }
        else
            temp2 = *s2;

        if (temp1 != temp2) {
            return temp1 - temp2;
        }
        s1++;
        s2++;
    }

    if (s1 - oris1 != len) {

        if (*s1 >= 'A' && *s1 <= 'Z') {
            temp1 = *s1 + 0x20;
        }
        else
            temp1 = *s1;

        if (*s2 >= 'A' && *s2 <= 'Z') {
            temp2 = *s2 + 0x20;
        }
        else
            temp2 = *s2;

        return temp1 - temp2;
    }

    return 0;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
char *tj_strupr(char *str)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */

    return str;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
char *tj_strlwr(char *str)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */

    return str;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strchr(const char *str, const char ch)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */

    return 0;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strstr(const char *str, const char *substr)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */

    return 0;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strrchr(const char *str, const char ch)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */

    return 0;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strrstr(const char *str, const char *substr)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */

    return 0;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
char *tj_strrev(char *str)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */

    return str;
}
